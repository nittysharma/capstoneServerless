current region is${Token[AWS.Region.7]}
Resources:
  MyBucketNotifications46AC0CD2:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName: metdataenrichment1776b21de91c4118a07e66ed2014df190342-testamp
      NotificationConfiguration:
        QueueConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: public/
            QueueArn:
              Fn::GetAtt:
                - MetaDataQ768D5BB8
                - Arn
      Managed: false
    DependsOn:
      - MetaDataQPolicyC3FA736A
      - MetaDataQ768D5BB8
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/MyBucket/Notifications/Resource
  MetaDataQ768D5BB8:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MetaDataQ
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/MetaDataQ/Resource
  MetaDataQPolicyC3FA736A:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - :s3:::metdataenrichment1776b21de91c4118a07e66ed2014df190342-testamp
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Fn::GetAtt:
                - MetaDataQ768D5BB8
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: MetaDataQ768D5BB8
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/MetaDataQ/Policy/Resource
  SQSLambdaServiceRoleC4E9E285:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/SQSLambda/ServiceRole/Resource
  SQSLambdaServiceRoleDefaultPolicy42F31AC5:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MetaDataQ768D5BB8
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: StatemachineID33BB54A4
        Version: "2012-10-17"
      PolicyName: SQSLambdaServiceRoleDefaultPolicy42F31AC5
      Roles:
        - Ref: SQSLambdaServiceRoleC4E9E285
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/SQSLambda/ServiceRole/DefaultPolicy/Resource
  SQSLambda72CB3E44:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267.zip
      Role:
        Fn::GetAtt:
          - SQSLambdaServiceRoleC4E9E285
          - Arn
      Environment:
        Variables:
          StepMachineARN:
            Ref: StatemachineID33BB54A4
      FunctionName: SQSLambda
      Handler: SQSLambda.handler
      Runtime: nodejs14.x
    DependsOn:
      - SQSLambdaServiceRoleDefaultPolicy42F31AC5
      - SQSLambdaServiceRoleC4E9E285
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/SQSLambda/Resource
      aws:asset:path: asset.82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267
      aws:asset:is-bundled: false
      aws:asset:property: Code
  SQSLambdaSqsEventSourceMetadataEnrichmentJavaStackMetaDataQ6E800A456DFE016D:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName:
        Ref: SQSLambda72CB3E44
      EventSourceArn:
        Fn::GetAtt:
          - MetaDataQ768D5BB8
          - Arn
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/SQSLambda/SqsEventSource:MetadataEnrichmentJavaStackMetaDataQ6E800A45/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  RecognizeImagesServiceRole9E03BEC6:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonRekognitionFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonDynamoDBFullAccess
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/RecognizeImages/ServiceRole/Resource
  RecognizeImagesAFA5FCFC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267.zip
      Role:
        Fn::GetAtt:
          - RecognizeImagesServiceRole9E03BEC6
          - Arn
      Environment:
        Variables:
          bucket: metdataenrichment1776b21de91c4118a07e66ed2014df190342-testamp
          table: assetMetadata
      FunctionName: RecognizeImages
      Handler: RecognizeImages.lambda_handler
      Runtime: python3.9
    DependsOn:
      - RecognizeImagesServiceRole9E03BEC6
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/RecognizeImages/Resource
      aws:asset:path: asset.82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267
      aws:asset:is-bundled: false
      aws:asset:property: Code
  RecognizeImagesInvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc8683E2E8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - RecognizeImagesAFA5FCFC
          - Arn
      Principal: states.amazonaws.com
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/RecognizeImages/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc=
  ComprehendTextServiceRoleB9C876F7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonDynamoDBFullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/ComprehendFullAccess
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/ComprehendText/ServiceRole/Resource
  ComprehendText316C2D1F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267.zip
      Role:
        Fn::GetAtt:
          - ComprehendTextServiceRoleB9C876F7
          - Arn
      Environment:
        Variables:
          bucket: metdataenrichment1776b21de91c4118a07e66ed2014df190342-testamp
          table: assetMetadata
      FunctionName: ComprehendText
      Handler: ComprehendText.lambda_handler
      Runtime: python3.9
    DependsOn:
      - ComprehendTextServiceRoleB9C876F7
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/ComprehendText/Resource
      aws:asset:path: asset.82a1bcabdf8b05cd7266b4a05e484414e62d0423f648cb4b57e434db671b6267
      aws:asset:is-bundled: false
      aws:asset:property: Code
  ComprehendTextInvoketnlpEgfIKpZyEIAINyVhXFSIfV5EJ7IaMp0cNGOc298E5BF3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ComprehendText316C2D1F
          - Arn
      Principal: states.amazonaws.com
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/ComprehendText/Invoke--tnlpEgfIKpZyEIAINy+VhXFS+IfV5EJ7IaMp0cNGOc=
  AssetDynamoDBTable0234A027:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: assetKey
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: assetKey
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: assetMetadata
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/AssetDynamoDBTable/Resource
  StatemachineIDRoleFD1216FD:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/StatemachineID/Role/Resource
  StatemachineIDRoleDefaultPolicy4916CE64:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ComprehendText316C2D1F
                  - Arn
              - Fn::GetAtt:
                  - RecognizeImagesAFA5FCFC
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - ComprehendText316C2D1F
                        - Arn
                    - :*
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - RecognizeImagesAFA5FCFC
                        - Arn
                    - :*
        Version: "2012-10-17"
      PolicyName: StatemachineIDRoleDefaultPolicy4916CE64
      Roles:
        - Ref: StatemachineIDRoleFD1216FD
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/StatemachineID/Role/DefaultPolicy/Resource
  StatemachineID33BB54A4:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - StatemachineIDRoleFD1216FD
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"RecognizeTask","States":{"RecognizeTask":{"Next":"ComprehendTask","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - RecognizeImagesAFA5FCFC
                - Arn
            - '","Payload.$":"$"}},"ComprehendTask":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - ComprehendText316C2D1F
                - Arn
            - '","Payload.$":"$"}}}}'
      StateMachineName: EnrichMetaDataStateMachine
    DependsOn:
      - StatemachineIDRoleDefaultPolicy4916CE64
      - StatemachineIDRoleFD1216FD
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/StatemachineID/Resource
  testdomainMasterUser59E17777:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludeCharacters: "{}'\\*[]()`"
        GenerateStringKey: password
        SecretStringTemplate: '{"username":"admin"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/testdomain/MasterUser/Resource
  testdomain58EEEF33:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword:
            Fn::Join:
              - ""
              - - "{{resolve:secretsmanager:"
                - Ref: testdomainMasterUser59E17777
                - :SecretString:password::}}
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: r5.large.search
        ZoneAwarenessEnabled: false
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-0-2019-07
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
      EngineVersion: OpenSearch_1.0
      LogPublishingOptions: {}
      NodeToNodeEncryptionOptions:
        Enabled: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/testdomain/Resource
  testdomainAccessPolicy6ACB6AD7:
    Type: Custom::OpenSearchAccessPolicy
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd22872D164C4C
          - Arn
      Create:
        Fn::Join:
          - ""
          - - '{"action":"updateDomainConfig","service":"OpenSearch","parameters":{"DomainName":"'
            - Ref: testdomain58EEEF33
            - '","AccessPolicies":"{\"Statement\":[{\"Action\":\"es:ESHttp*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Resource\":\"'
            - Fn::GetAtt:
                - testdomain58EEEF33
                - Arn
            - /*\"}],\"Version\":\"2012-10-17\"}"},"outputPaths":["DomainConfig.AccessPolicies"],"physicalResourceId":{"id":"
            - Ref: testdomain58EEEF33
            - AccessPolicy"}}
      Update:
        Fn::Join:
          - ""
          - - '{"action":"updateDomainConfig","service":"OpenSearch","parameters":{"DomainName":"'
            - Ref: testdomain58EEEF33
            - '","AccessPolicies":"{\"Statement\":[{\"Action\":\"es:ESHttp*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Resource\":\"'
            - Fn::GetAtt:
                - testdomain58EEEF33
                - Arn
            - /*\"}],\"Version\":\"2012-10-17\"}"},"outputPaths":["DomainConfig.AccessPolicies"],"physicalResourceId":{"id":"
            - Ref: testdomain58EEEF33
            - AccessPolicy"}}
      InstallLatestAwsSdk: false
    DependsOn:
      - testdomainAccessPolicyCustomResourcePolicyF0714533
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/testdomain/AccessPolicy/Resource/Default
  testdomainAccessPolicyCustomResourcePolicyF0714533:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: es:UpdateDomainConfig
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - testdomain58EEEF33
                - Arn
        Version: "2012-10-17"
      PolicyName: testdomainAccessPolicyCustomResourcePolicyF0714533
      Roles:
        - Ref: AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/testdomain/AccessPolicy/CustomResourcePolicy/Resource
  AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/AWS679f53fac002430cb0da5b7982bd2287/ServiceRole/Resource
  AWS679f53fac002430cb0da5b7982bd22872D164C4C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 456cb0185a2fb74f65509142da5cecc43b25a8d960f32973e0a8f1ef6753606f.zip
      Role:
        Fn::GetAtt:
          - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 120
    DependsOn:
      - AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/AWS679f53fac002430cb0da5b7982bd2287/Resource
      aws:asset:path: asset.456cb0185a2fb74f65509142da5cecc43b25a8d960f32973e0a8f1ef6753606f
      aws:asset:is-bundled: false
      aws:asset:property: Code
  opensearchtestlambdaWidgetStore2B3278AF:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/opensearchtestlambda/WidgetStore/Resource
  opensearchtestlambdaWidgetHandlerServiceRole90D89C96:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/opensearchtestlambda/WidgetHandler/ServiceRole/Resource
  opensearchtestlambdaWidgetHandlerServiceRoleDefaultPolicy53C02C46:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - opensearchtestlambdaWidgetStore2B3278AF
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - opensearchtestlambdaWidgetStore2B3278AF
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: opensearchtestlambdaWidgetHandlerServiceRoleDefaultPolicy53C02C46
      Roles:
        - Ref: opensearchtestlambdaWidgetHandlerServiceRole90D89C96
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/opensearchtestlambda/WidgetHandler/ServiceRole/DefaultPolicy/Resource
  opensearchtestlambdaWidgetHandler9BB860DA:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 07a8515f906bf7d63108735833e2c05b3c3b005f621862e6b2424bac5414f8d6.zip
      Role:
        Fn::GetAtt:
          - opensearchtestlambdaWidgetHandlerServiceRole90D89C96
          - Arn
      Environment:
        Variables:
          DB_SORT_KEY: CelebrityData
          ES_HOST:
            Fn::GetAtt:
              - testdomain58EEEF33
              - DomainEndpoint
          BUCKET:
            Ref: opensearchtestlambdaWidgetStore2B3278AF
          ES_INDEX: news
          DB_HASH_KEY: assetKey
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
    DependsOn:
      - opensearchtestlambdaWidgetHandlerServiceRoleDefaultPolicy53C02C46
      - opensearchtestlambdaWidgetHandlerServiceRole90D89C96
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/opensearchtestlambda/WidgetHandler/Resource
      aws:asset:path: asset.07a8515f906bf7d63108735833e2c05b3c3b005f621862e6b2424bac5414f8d6.zip
      aws:asset:is-bundled: false
      aws:asset:property: Code
  OpenSearchServiceRoleE5FF16FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/OpenSearch/ServiceRole/Resource
  OpenSearch587998CD:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 6f52b8540aa211dca6d949d78a443f23796e7d45a55526a34e012194a44d78fe.zip
      Role:
        Fn::GetAtt:
          - OpenSearchServiceRoleE5FF16FA
          - Arn
      Environment:
        Variables:
          ApiGatewayRegion:
            Ref: AWS::Region
          OpenSearchURl:
            Fn::Join:
              - ""
              - - https://
                - Fn::GetAtt:
                    - testdomain58EEEF33
                    - DomainEndpoint
      FunctionName: OpenSearch
      Handler: opensearch-lambda.lambda_handler
      Runtime: python3.9
    DependsOn:
      - OpenSearchServiceRoleE5FF16FA
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/OpenSearch/Resource
      aws:asset:path: asset.6f52b8540aa211dca6d949d78a443f23796e7d45a55526a34e012194a44d78fe.zip
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21QTU/DMAz9LbtnYWwHuLIBEgjE2LhPXuptoU1S4qTTVPW/kzqjfIhL/PxiP9tvKq8mcjKCI41VUY4rvZXtOoAqRaI2Lc1kO4+qxDAHQpGhWOxsRp2gD5Lta8SIPZsBv0tXaXUayJx2ogKzLUC299GqoJ3tCwZ816ANaxe9wmeoa233/ff/7BK90UR92zpRFQY3CHVCg5HtylW8Fcfvfb5WodkGiDCQvOmDKE4WjCuSAW+wzZ0MUmXAenfWpk0AKkk+8SEPtnEl/i5gA0PaVR20ZZmfeSdcjZYQvDoQ+kYrlO2tM6DZi4zSSFQ+rWbAwh59kuScxRh1HV+GxL6IAfApad6+t0lFCs5s/PkzHXqkBXND/d90Z19iqCNPWjhb6OznIzRwcXktJ3I6eietxz7aoA3KVY6fXqgtK0cCAAA=
    Metadata:
      aws:cdk:path: MetadataEnrichmentJavaStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  OpenSearchDashboardURL:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - testdomain58EEEF33
              - DomainEndpoint
          - /_dashboards
    Export:
      Name: OpenSearchDashboardURL
  username:
    Value: admin
    Export:
      Name: OpenSearchUsername
  password:
    Value: Get it from Secret Manager
    Export:
      Name: OpenSearchpassword
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

